generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @unique
  isOnline           Boolean      @default(false)
  sockets            Socket[]
  writtenMessages    Message[]
  ownedContacts      Contact[]    @relation("OwnedContacts")
  belongedToContacts Contact[]    @relation("BelongedToContact")
  connections        Connection[]

  @@map("users")
}

model Socket {
  id     String @id
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("sockets")
}

model Contact {
  id      String @id @unique
  ownerId String
  owner   User   @relation("OwnedContacts", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
  user    User   @relation("BelongedToContact", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("contacts")
}

model Connection {
  id String @id @default(uuid())

  users    User[]
  messages Message[]

  oneToOneDialog OneToOneDialog?
  groupDialog    GroupDialog?

  @@map(name: "connections")
}

model OneToOneDialog {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  connectionId String     @unique
  connection   Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map(name: "oneToOneDialogs")
}

model GroupDialog {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  connectionId String     @unique
  connection   Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map(name: "groupDialogs")
}

model Message {
  id String @id @default(uuid())

  text String @db.VarChar(4096)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  connectionId String
  connection   Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map(name: "messages")
}
